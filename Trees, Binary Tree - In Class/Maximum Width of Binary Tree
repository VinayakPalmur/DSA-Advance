/*
// Information about the class Node
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}
*/
static int getMaxWidth(Node root)
{
    // Your code here
    // You can create your helper function or
   // class as your convenience	
   
        int maxWidth = 0;
        int width;
        int h = height(root);
        int i;
 
        /* Get width of each level and compare
           the width with maximum width so far */
        for (i = 1; i <= h; i++) {
            width = getWidth(root, i);
            if (width > maxWidth){
                maxWidth = width;
            }   
        }
 
        return maxWidth;
    }
    

    static int height(Node root)
    {
        if (root == null)
            return 0;
        else {
            /* compute the height of each subtree */
            int lHeight = height(root.left);
            int rHeight = height(root.right);
 
            /* use the larger one */
            return (lHeight > rHeight) ? (lHeight + 1)
                                       : (rHeight + 1);
        }
    }

    static int getWidth(Node root, int level)
    {
        if (root == null)
            return 0;
 
        if (level == 1)
            return 1;
        else if (level > 1)
            return getWidth(root.left, level - 1)
                + getWidth(root.right, level - 1);
        return 0;
    }
